// Code generated by oto; DO NOT EDIT.

package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
	"fmt"

	"github.com/pkg/errors"
	
)

// Client is used to access Pace services.
type Client struct {
	// RemoteHost is the URL of the remote server that this Client should
	// access.
	RemoteHost  string
	// HTTPClient is the http.Client to use when making HTTP requests.
	HTTPClient 	*http.Client
	// BeforeRequest is an optional hook that gives you the opportunity
	// to inspect or modify the request before it is made.
	// Useful for adding auth headers, for example.
	BeforeRequest func(r *http.Request) error
	// Debug writes a line of debug log output.
	Debug func(s string)
}

// New makes a new Client.
func New(remoteHost string) *Client {
	c := &Client{
		RemoteHost: remoteHost,
		Debug: func(s string) {},
		HTTPClient: &http.Client{Timeout:10*time.Second},
	}
	return c
}


type PersonService struct {
	client *Client
}

// NewPersonService makes a new client for accessing PersonService services.
func NewPersonService(client *Client) *PersonService {
	return &PersonService{
		client: client,
	}
}


// Add adds a person
func (s *PersonService) Add(ctx context.Context, r AddRequest) (*AddResponse, error) {
	requestBodyBytes, err := json.Marshal(r)
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Add: marshal AddRequest")
	}
	url := s.client.RemoteHost + "PersonService.Add"
	s.client.Debug(fmt.Sprintf("POST %s", url))
	s.client.Debug(fmt.Sprintf(">> %s", string(requestBodyBytes)))
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(requestBodyBytes))
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Add: NewRequest")
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept-Encoding", "gzip")
	req = req.WithContext(ctx)
	if s.client.BeforeRequest != nil {
		err = s.client.BeforeRequest(req)
		if err != nil {
			// don't wrap this error, it belongs to the user
			return nil, err
		}
	}
	resp, err := s.client.HTTPClient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Add")
	}
	defer resp.Body.Close()
	var response struct {
		AddResponse
		Error string
	}
	var bodyReader io.Reader = resp.Body
	if strings.Contains(resp.Header.Get("Content-Encoding"), "gzip") {
		decodedBody, err := gzip.NewReader(resp.Body)
		if err != nil {
			return nil, errors.Wrap(err, "PersonService.Add: new gzip reader")
		}
		defer decodedBody.Close()
		bodyReader = decodedBody
	}
	respBodyBytes, err := ioutil.ReadAll(bodyReader)
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Add: read response body")
	}
	if err := json.Unmarshal(respBodyBytes, &response); err != nil {
		if resp.StatusCode != http.StatusOK {
			return nil, errors.Errorf("PersonService.Add: (%d) %v", resp.StatusCode, string(respBodyBytes))
		}
		return nil, err
	}
	if response.Error != "" {
		return nil, errors.New(response.Error)
	}
	return &response.AddResponse, nil
}

// Show shows a person
func (s *PersonService) Show(ctx context.Context, r ShowRequest) (*ShowResponse, error) {
	requestBodyBytes, err := json.Marshal(r)
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Show: marshal ShowRequest")
	}
	url := s.client.RemoteHost + "PersonService.Show"
	s.client.Debug(fmt.Sprintf("POST %s", url))
	s.client.Debug(fmt.Sprintf(">> %s", string(requestBodyBytes)))
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(requestBodyBytes))
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Show: NewRequest")
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept-Encoding", "gzip")
	req = req.WithContext(ctx)
	if s.client.BeforeRequest != nil {
		err = s.client.BeforeRequest(req)
		if err != nil {
			// don't wrap this error, it belongs to the user
			return nil, err
		}
	}
	resp, err := s.client.HTTPClient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Show")
	}
	defer resp.Body.Close()
	var response struct {
		ShowResponse
		Error string
	}
	var bodyReader io.Reader = resp.Body
	if strings.Contains(resp.Header.Get("Content-Encoding"), "gzip") {
		decodedBody, err := gzip.NewReader(resp.Body)
		if err != nil {
			return nil, errors.Wrap(err, "PersonService.Show: new gzip reader")
		}
		defer decodedBody.Close()
		bodyReader = decodedBody
	}
	respBodyBytes, err := ioutil.ReadAll(bodyReader)
	if err != nil {
		return nil, errors.Wrap(err, "PersonService.Show: read response body")
	}
	if err := json.Unmarshal(respBodyBytes, &response); err != nil {
		if resp.StatusCode != http.StatusOK {
			return nil, errors.Errorf("PersonService.Show: (%d) %v", resp.StatusCode, string(respBodyBytes))
		}
		return nil, err
	}
	if response.Error != "" {
		return nil, errors.New(response.Error)
	}
	return &response.ShowResponse, nil
}




	
		type AddRequest struct {
			
				
 					// Name is the name of the person to show.
Name string `json:"name"`
				
			
				
 					// Age is the age of a person
Age int `json:"age"`
				
			
		}
	

	
		type AddResponse struct {
			
				
			
		}
	

	
		type Person struct {
			
				
 					// Name is the name of the person to show.
Name string `json:"name"`
				
			
				
 					// Age is the age of a person
Age int `json:"age"`
				
			
		}
	

	
		type ShowRequest struct {
			
				
 					// Name is the name of the person to show.
Name string `json:"name"`
				
			
				
 					// Age is the age of a person
Age int `json:"age"`
				
			
		}
	

	
		type ShowResponse struct {
			
				
 					// Name is the name of the person to show.
Name string `json:"name"`
				
			
				
 					// Age is the age of a person
Age int `json:"age"`
				
			
				
			
		}
	

